#############################################개인적인 회고록#############################################

★ ci.yml 를 통해서 github 내 파일 검사하기 ★

이게 너무 힘들었다... 모르면 조교님께 질문하는 습관을 가져야 하는데 너무 스스로 고치려고 해서 시간을 너무 많이 잡아먹는다.
1. repository 분리
  파일 검사할때 fastapi 레포지토리 내에 과제 파일까지 함께 넣어두니 계속 오류가 발생했다.
  처음엔 멋드러지게 bash 명령어를 통해서 과제 폴더를 통째로 옮기려고 해봤으나 계속 실패해서 그냥 원래 과제폴더를 삭제하고 새로운 과제용 레포지토리를 만들어서 그대로 다시 업로드 하였다.
2. ci.yml 내에 주석 삭제
  각 기능 마다 주석을 통해 부분부분 설명을 적어 놓았으나 이게 오류의 원인이였다... 계속 ChatGPT 한테 물어보고 조금씩 수정해보고 안됐으나 주석들을 말끔히 삭제하니 오류없이 한방에 돌아갔다.

느낀점 - 특히 이렇게 복잡한 과정으로 갈수록 오류가 나지 않게 깔끔하게 진입해야 하는게 핵심인듯 하다.

########################################################################################################

1. pytest_tutorial
  a. pytest . : 전체 테스트 ( ex. 1 / 0 = ZeroDivisionError [ 0으로 뭔가를 나눌수는 없음 ])
  b. 버그는 "경계"를 좋아함 ( ex. int 의 경우 => -1, 0, 1 )

2. coverage
  a. coverage의 정의 : [ 한번이라도 실행된 코드 / 전체 코드 ]
  b. poetry run coverage report -m ( 도움말 -m => --help ) : 실행이 안된 라인을 보고서 형식으로 받아본다.
    • Stmts : 명령문의 총 갯수
    • Miss : 실행되지 않은 명령문의 갯수
    • Cover : 실행된 비율 ( omit[제외, 생략] 사용하지 않을 경우 전체 명령문을 인식 )
  c. poetry run coverage html : 테스트 결과를 html 형식으로 받아본다.

3. dev dependency ( 종속성 관리 )
  a. 서버가 실행되는 도중에 필요한 종속성 ( ex. FastApi, Uvicorn, Pydantic )
  b. 개발하는 도중에만 필요하고, 서버가 실행되는 도중에는 전혀 사용되지 않는 종속성
   => 추측) 종속성 관리란 여러 모듈들을 필요한 곳에만 사용 되도록 분리하는 것?

4. importance of testing
  a. 코드와 프로젝트가 쌓일수록, 테스트의 중요성이 높아진다.
  b. 테스트는 자신이 작성한 코드가 의도한 대로 동작하는지를 검증해줌
